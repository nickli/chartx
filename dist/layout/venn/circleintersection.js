"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.intersectionArea=intersectionArea,exports.containedInCircles=containedInCircles,exports.circleArea=circleArea,exports.distance=distance,exports.circleOverlap=circleOverlap,exports.circleCircleIntersection=circleCircleIntersection,exports.getCenter=getCenter;var SMALL=1e-10;function intersectionArea(e,r){var t,n=getIntersectionPoints(e),a=n.filter(function(r){return containedInCircles(r,e)}),i=0,c=0,s=[];if(1<a.length){var l=getCenter(a);for(t=0;t<a.length;++t){var o=a[t];o.angle=Math.atan2(o.x-l.x,o.y-l.y)}a.sort(function(r,e){return e.angle-r.angle});var u=a[a.length-1];for(t=0;t<a.length;++t){var x=a[t];c+=(u.x+x.x)*(x.y-u.y);for(var d={x:(x.x+u.x)/2,y:(x.y+u.y)/2},h=null,y=0;y<x.parentIndex.length;++y)if(-1<u.parentIndex.indexOf(x.parentIndex[y])){var f=e[x.parentIndex[y]],p=Math.atan2(x.x-f.x,x.y-f.y),g=Math.atan2(u.x-f.x,u.y-f.y),v=g-p;v<0&&(v+=2*Math.PI);var M=g-v/2,I=distance(d,{x:f.x+f.radius*Math.sin(M),y:f.y+f.radius*Math.cos(M)});I>2*f.radius&&(I=2*f.radius),(null===h||h.width>I)&&(h={circle:f,width:I,p1:x,p2:u})}null!==h&&(s.push(h),i+=circleArea(h.circle.radius,h.width),u=x)}}else{var A=e[0];for(t=1;t<e.length;++t)e[t].radius<A.radius&&(A=e[t]);var C=!1;for(t=0;t<e.length;++t)if(distance(e[t],A)>Math.abs(A.radius-e[t].radius)){C=!0;break}C?i=c=0:(i=A.radius*A.radius*Math.PI,s.push({circle:A,p1:{x:A.x,y:A.y+A.radius},p2:{x:A.x-SMALL,y:A.y+A.radius},width:2*A.radius}))}return c/=2,r&&(r.area=i+c,r.arcArea=i,r.polygonArea=c,r.arcs=s,r.innerPoints=a,r.intersectionPoints=n),i+c}function containedInCircles(r,e){for(var t=0;t<e.length;++t)if(distance(r,e[t])>e[t].radius+SMALL)return!1;return!0}function getIntersectionPoints(r){for(var e=[],t=0;t<r.length;++t)for(var n=t+1;n<r.length;++n)for(var a=circleCircleIntersection(r[t],r[n]),i=0;i<a.length;++i){var c=a[i];c.parentIndex=[t,n],e.push(c)}return e}function circleArea(r,e){return r*r*Math.acos(1-e/r)-(r-e)*Math.sqrt(e*(2*r-e))}function distance(r,e){return Math.sqrt((r.x-e.x)*(r.x-e.x)+(r.y-e.y)*(r.y-e.y))}function circleOverlap(r,e,t){if(r+e<=t)return 0;if(t<=Math.abs(r-e))return Math.PI*Math.min(r,e)*Math.min(r,e);var n=e-(t*t-r*r+e*e)/(2*t);return circleArea(r,r-(t*t-e*e+r*r)/(2*t))+circleArea(e,n)}function circleCircleIntersection(r,e){var t=distance(r,e),n=r.radius,a=e.radius;if(n+a<=t||t<=Math.abs(n-a))return[];var i=(n*n-a*a+t*t)/(2*t),c=Math.sqrt(n*n-i*i),s=r.x+i*(e.x-r.x)/t,l=r.y+i*(e.y-r.y)/t,o=-(e.y-r.y)*(c/t),u=-(e.x-r.x)*(c/t);return[{x:s+o,y:l-u},{x:s-o,y:l+u}]}function getCenter(r){for(var e={x:0,y:0},t=0;t<r.length;++t)e.x+=r[t].x,e.y+=r[t].y;return e.x/=r.length,e.y/=r.length,e}