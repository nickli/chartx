define("layout/venn/layout",["fmin","./circleintersection"],function(n,t,r){"use strict";t.__esModule=!0;var e=n("fmin"),a=n("./circleintersection");t.venn=function(n,t){(t=t||{}).maxIterations=t.maxIterations||500;var r,a=t.initialLayout||u,i=t.lossFunction||l,s=a(n=function(n){n=n.slice();var t,r,e,a,i=[],s={};for(t=0;t<n.length;++t){var o=n[t];1==o.sets.length?i.push(o.sets[0]):2==o.sets.length&&(e=o.sets[0],a=o.sets[1],s[[e,a]]=!0,s[[a,e]]=!0)}for(i.sort(function(n,t){return n>t}),t=0;t<i.length;++t)for(e=i[t],r=t+1;r<i.length;++r)a=i[r],[e,a]in s||n.push({sets:[e,a],size:0});return n}(n),t),o=[],h=[];for(r in s)s.hasOwnProperty(r)&&(o.push(s[r].x),o.push(s[r].y),h.push(r));for(var f=e.nelderMead(function(t){for(var r={},e=0;e<h.length;++e){var a=h[e];r[a]={x:t[2*e],y:t[2*e+1],radius:s[a].radius}}return i(r,n)},o,t).x,g=0;g<h.length;++g)r=h[g],s[r].x=f[2*g],s[r].y=f[2*g+1];return s};var i=1e-10;function s(n,t,r){return Math.min(n,t)*Math.min(n,t)*Math.PI<=r+i?Math.abs(n-t):e.bisect(function(e){return a.circleOverlap(n,t,e)-r},0,n+t)}function o(n,t,r){var a=e.zerosM(t.length,t.length),i=e.zerosM(t.length,t.length);return n.filter(function(n){return 2==n.sets.length}).map(function(n){var e=r[n.sets[0]],o=r[n.sets[1]],u=s(Math.sqrt(t[e].size/Math.PI),Math.sqrt(t[o].size/Math.PI),n.size);a[e][o]=a[o][e]=u;var h=0;n.size+1e-10>=Math.min(t[e].size,t[o].size)?h=1:n.size<=1e-10&&(h=-1),i[e][o]=i[o][e]=h}),{distances:a,constraints:i}}function u(n,t){var r=f(n,t),e=t.lossFunction||l;if(n.length>=8){var a=h(n,t);e(a,n)+1e-8<e(r,n)&&(r=a)}return r}function h(n,t){var r,a=(t=t||{}).restarts||10,i=[],s={};for(r=0;r<n.length;++r){var u=n[r];1==u.sets.length&&(s[u.sets[0]]=i.length,i.push(u))}var h=o(n,i,s),f=h.distances,l=h.constraints,g=e.norm2(f.map(e.norm2))/f.length;f=f.map(function(n){return n.map(function(n){return n/g})});var x,c,v=function(n,t){return function(n,t,r,e){var a,i=0;for(a=0;a<t.length;++a)t[a]=0;for(a=0;a<r.length;++a)for(var s=n[2*a],o=n[2*a+1],u=a+1;u<r.length;++u){var h=n[2*u],f=n[2*u+1],l=r[a][u],g=e[a][u],x=(h-s)*(h-s)+(f-o)*(f-o),c=Math.sqrt(x),v=x-l*l;g>0&&c<=l||g<0&&c>=l||(i+=2*v*v,t[2*a]+=4*v*(s-h),t[2*a+1]+=4*v*(o-f),t[2*u]+=4*v*(h-s),t[2*u+1]+=4*v*(f-o))}return i}(n,t,f,l)};for(r=0;r<a;++r){var y=e.zeros(2*f.length).map(Math.random);c=e.conjugateGradient(v,y,t),(!x||c.fx<x.fx)&&(x=c)}var m=x.x,p={};for(r=0;r<i.length;++r){var d=i[r];p[d.sets[0]]={x:m[2*r]*g,y:m[2*r+1]*g,radius:Math.sqrt(d.size/Math.PI)}}if(t.history)for(r=0;r<t.history.length;++r)e.scale(t.history[r].x,g);return p}function f(n,t){for(var r,e=t&&t.lossFunction?t.lossFunction:l,o={},u={},h=0;h<n.length;++h){var f=n[h];1==f.sets.length&&(r=f.sets[0],o[r]={x:1e10,y:1e10,rowid:o.length,size:f.size,radius:Math.sqrt(f.size/Math.PI)},u[r]=[])}for(n=n.filter(function(n){return 2==n.sets.length}),h=0;h<n.length;++h){var g=n[h],x=g.hasOwnProperty("weight")?g.weight:1,c=g.sets[0],v=g.sets[1];g.size+i>=Math.min(o[c].size,o[v].size)&&(x=0),u[c].push({set:v,size:g.size,weight:x}),u[v].push({set:c,size:g.size,weight:x})}var y=[];for(r in u)if(u.hasOwnProperty(r)){var m=0;for(h=0;h<u[r].length;++h)m+=u[r][h].size*u[r][h].weight;y.push({set:r,size:m})}function p(n,t){return t.size-n.size}y.sort(p);var d={};function M(n){return n.set in d}function z(n,t){o[t].x=n.x,o[t].y=n.y,d[t]=!0}for(z({x:0,y:0},y[0].set),h=1;h<y.length;++h){var R=y[h].set,w=u[R].filter(M);if(r=o[R],w.sort(p),0===w.length)throw"ERROR: missing pairwise overlap information";for(var P=[],I=0;I<w.length;++I){var O=o[w[I].set],b=s(r.radius,O.radius,w[I].size);P.push({x:O.x+b,y:O.y}),P.push({x:O.x-b,y:O.y}),P.push({y:O.y+b,x:O.x}),P.push({y:O.y-b,x:O.x});for(var F=I+1;F<w.length;++F)for(var q=o[w[F].set],L=s(r.radius,q.radius,w[F].size),S=a.circleCircleIntersection({x:O.x,y:O.y,radius:b},{x:q.x,y:q.y,radius:L}),j=0;j<S.length;++j)P.push(S[j])}var A=1e50,C=P[0];for(I=0;I<P.length;++I){o[R].x=P[I].x,o[R].y=P[I].y;var D=e(o,n);D<A&&(A=D,C=P[I])}z(C,R)}return o}function l(n,t){var r=0;for(var e=0;e<t.length;++e){var i,s=t[e];if(1!=s.sets.length){if(2==s.sets.length){var o=n[s.sets[0]],u=n[s.sets[1]];i=a.circleOverlap(o.radius,u.radius,a.distance(o,u))}else i=a.intersectionArea(s.sets.map(function(t){return n[t]}));r+=(s.hasOwnProperty("weight")?s.weight:1)*(i-s.size)*(i-s.size)}}return r}function g(n,t,r){var e;if(null===r?n.sort(function(n,t){return t.radius-n.radius}):n.sort(r),n.length>0){var i=n[0].x,s=n[0].y;for(e=0;e<n.length;++e)n[e].x-=i,n[e].y-=s}2==n.length&&(a.distance(n[0],n[1])<Math.abs(n[1].radius-n[0].radius)&&(n[1].x=n[0].x+n[0].radius-n[1].radius-1e-10,n[1].y=n[0].y));if(n.length>1){var o,u,h=Math.atan2(n[1].x,n[1].y)-t,f=Math.cos(h),l=Math.sin(h);for(e=0;e<n.length;++e)o=n[e].x,u=n[e].y,n[e].x=f*o-l*u,n[e].y=l*o+f*u}if(n.length>2){for(var g=Math.atan2(n[2].x,n[2].y)-t;g<0;)g+=2*Math.PI;for(;g>2*Math.PI;)g-=2*Math.PI;if(g>Math.PI){var x=n[1].y/(1e-10+n[1].x);for(e=0;e<n.length;++e){var c=(n[e].x+x*n[e].y)/(1+x*x);n[e].x=2*c-n[e].x,n[e].y=2*c*x-n[e].y}}}}function x(n){function t(n){return n.parent!==n&&(n.parent=t(n.parent)),n.parent}n.map(function(n){n.parent=n});for(var r=0;r<n.length;++r)for(var e=r+1;e<n.length;++e){var i=n[r].radius+n[e].radius;a.distance(n[r],n[e])+1e-10<i&&(s=n[e],o=n[r],u=void 0,void 0,u=t(s),h=t(o),u.parent=h)}var s,o,u,h,f,l={};for(r=0;r<n.length;++r)(f=t(n[r]).parent.setid)in l||(l[f]=[]),l[f].push(n[r]);n.map(function(n){delete n.parent});var g=[];for(f in l)l.hasOwnProperty(f)&&g.push(l[f]);return g}function c(n){var t=function(t){return{max:Math.max.apply(null,n.map(function(n){return n[t]+n.radius})),min:Math.min.apply(null,n.map(function(n){return n[t]-n.radius}))}};return{xRange:t("x"),yRange:t("y")}}t.distanceFromIntersectArea=s,t.getDistanceMatrices=o,t.bestInitialLayout=u,t.constrainedMDSLayout=h,t.greedyLayout=f,t.lossFunction=l,t.disjointCluster=x,t.normalizeSolution=function(n,t,r){null===t&&(t=Math.PI/2);var e,a,i=[];for(a in n)if(n.hasOwnProperty(a)){var s=n[a];i.push({x:s.x,y:s.y,radius:s.radius,setid:a})}var o=x(i);for(e=0;e<o.length;++e){g(o[e],t,r);var u=c(o[e]);o[e].size=(u.xRange.max-u.xRange.min)*(u.yRange.max-u.yRange.min),o[e].bounds=u}o.sort(function(n,t){return t.size-n.size});var h=(i=o[0]).bounds,f=(h.xRange.max-h.xRange.min)/50;function l(n,t,r){if(n){var e,a,s,o=n.bounds;t?e=h.xRange.max-o.xRange.min+f:(e=h.xRange.max-o.xRange.max,(s=(o.xRange.max-o.xRange.min)/2-(h.xRange.max-h.xRange.min)/2)<0&&(e+=s)),r?a=h.yRange.max-o.yRange.min+f:(a=h.yRange.max-o.yRange.max,(s=(o.yRange.max-o.yRange.min)/2-(h.yRange.max-h.yRange.min)/2)<0&&(a+=s));for(var u=0;u<n.length;++u)n[u].x+=e,n[u].y+=a,i.push(n[u])}}for(var v=1;v<o.length;)l(o[v],!0,!1),l(o[v+1],!1,!0),l(o[v+2],!0,!0),v+=3,h=c(i);var y={};for(e=0;e<i.length;++e)y[i[e].setid]=i[e];return y},t.scaleSolution=function(n,t,r,e){var a=[],i=[];for(var s in n)n.hasOwnProperty(s)&&(i.push(s),a.push(n[s]));t-=2*e,r-=2*e;var o=c(a),u=o.xRange,h=o.yRange;if(u.max==u.min||h.max==h.min)return n;for(var f=t/(u.max-u.min),l=r/(h.max-h.min),g=Math.min(l,f),x=(t-(u.max-u.min)*g)/2,v=(r-(h.max-h.min)*g)/2,y={},m=0;m<a.length;++m){var p=a[m];y[i[m]]={radius:g*p.radius,x:e+x+(p.x-u.min)*g,y:e+v+(p.y-h.min)*g}}return y}});